

## Two services
## 1. Get an alert from ACC journalctl
## 2. Run gNMI on ACC

### On server (ACC)

cat > /root/mcp-security-server/server.py << 'EOF'
import subprocess
from mcp.server.fastmcp import FastMCP

mcp = FastMCP("Log Alert and gNMI Server")

@mcp.tool()
def get_journal_alerts(keyword: str = "alert") -> str:
    """
    Search for alert messages in system logs using journalctl.
    """
    try:
        result = subprocess.run(
            ["journalctl", "--no-pager", "-p", "alert", "-n", "20"],
            capture_output=True,
            text=True,
            check=True,
        )
        return result.stdout if result.stdout else "No alerts found."
    except subprocess.CalledProcessError as e:
        return f"Error running journalctl: {e}"
    except Exception as e:
        return f"Unexpected error: {e}"

@mcp.tool()
def get_gnmi_system() -> str:
    """
    Run the gNMI CLI command and return its output.
    """
    cmd = [
        "/opt/p4/p4-cp-nws/bin/sgnmi_cli",
        "get",
        "/system",
        "--grpc_addr",
        "10.10.0.2:9339"
    ]
    try:
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            check=True,
        )
        return result.stdout if result.stdout else "No response from gNMI service."
    except subprocess.CalledProcessError as e:
        return f"Error running gNMI CLI: {e.stderr or e}"
    except Exception as e:
        return f"Unexpected error: {e}"

if __name__ == "__main__":
    mcp.run(transport="stdio")

EOF



# Run server
source venv/bin/activate
python server.py

### On client (host)

cat > /root/mcp-security-client/client.py << 'EOF'
import asyncio
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

async def main():
    server_params = StdioServerParameters(
        command="ssh",
        args=[
            "root@10.10.0.2",
            "/root/mcp-security-server/venv/bin/python",
            "/root/mcp-security-server/server.py"
        ]
    )

    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()
            print("Connected to MCP server.")

            while True:
                print("\nSelect query type:")
                print("1) Check journalctl alerts")
                print("2) Run gNMI get /system")
                print("q) Quit")

                choice = input("Enter choice (1/2/q): ").strip().lower()
                if choice == "1":
                    print("Fetching journalctl alerts...")
                    response = await session.call_tool("get_journal_alerts", {"keyword": "alert"})
                    print("\n--- Journalctl Alerts ---")
                    print(response)
                    print("-------------------------")
                elif choice == "2":
                    print("Running gNMI get command...")
                    response = await session.call_tool("get_gnmi_system")
                    print("\n--- gNMI Response ---")
                    print(response)
                    print("---------------------")
                elif choice == "q":
                    print("Exiting client.")
                    break
                else:
                    print("Invalid choice, please try again.")

if __name__ == "__main__":
    asyncio.run(main())

EOF



# Run client
source venv/bin/activate
python client.py
